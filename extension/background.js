// import the wasm module and the summarize function
import initWasmModule, { summarize as wasmSummarize } from './wasm/summy_background.js';
import { MODEL_KEY, API_KEY_KEY, DEFAULT_MODEL } from './constants.js';

console.log("Background script started");

// run the wasm initializer before calling wasm methods
// the initializer is generated by wasm_pack
(async () => {
    await initWasmModule();
})();

const contextMenuId = "summyContextMenu"

chrome.contextMenus.create({
    id: contextMenuId,
    title: "Summarize with Summy",
    contexts:["page"],
});

chrome.contextMenus.onClicked.addListener((info, tab) => {
    if (info.menuItemId === contextMenuId) {
        // Execute a content script to get the page HTML
        chrome.scripting.executeScript({
            target: { tabId: tab.id },
            function: () => document.documentElement.outerHTML
        }, (results) => {
            if (results && results[0] && results[0].result) {
                const html = results[0].result;
                summarize(tab, html);
            } else {
                console.error("Failed to get page HTML");
            }
        });
    }
});

function summarize(tab, html) {
    // Get the model and API key from storage
    chrome.storage.sync.get({[MODEL_KEY]: DEFAULT_MODEL, [API_KEY_KEY]: ''}, function(items) {
        const model = items[MODEL_KEY];
        const apiKey = items[API_KEY_KEY];

        if (!model) {
            displaySummary(tab, null, "LLM model not set");
            return;
        }

        wasmSummarize(html, model, apiKey).then(function (summary) {
            console.log("summarize success:\n", summary);
            displaySummary(tab, summary, null);
        }).catch(function (error) {
            console.log("summarize error:", error);
            displaySummary(tab, null, "Failed to summarize webpage");
        });
    });
};

function displaySummary(tab, summary, error) {
    chrome.tabs.sendMessage(tab.id,
        {
            msg: "summy_tldr",
            result: summary,
            error: error
        }
    );
}

chrome.runtime.onMessage.addListener((request, _, sendResponse) => {
    if (request.msg === "summy_capture") {
        let params = {
            currentWindow: true,
            active: true
        }

        chrome.tabs.query(params, function (tabs) {
            summarize(tabs[0], request.html);
        });

        // acknowledge the message
        sendResponse({received: true});

        // Return true to indicate we'll respond asynchronously
        return true;
    }
});